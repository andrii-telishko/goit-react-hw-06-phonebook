{"version":3,"sources":["components/ContactItem/ContactItem.js","redux/actions.js","components/ContactsList/ContactsList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","App.js","reportWebVitals.js","contacts.js","redux/store.js","index.js"],"names":["ContactItem","name","number","className","defaultProps","addContact","createAction","payload","id","uuidv4","deleteContact","changeFilter","getFilteredContacts","contacts","filter","toLowerCase","includes","connect","dispatch","onClick","actions","map","type","ContactForm","state","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","reset","this","onChange","Component","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","contactsList","createReducer","_","combineReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fbb4bd3.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactItem.scss'\r\n\r\nconst ContactItem = ({name,number}) => {\r\n    return (<>\r\n        <span className='contact-name'>{name}: </span>\r\n        <span className='contact-number'>{number}</span>\r\n    </>);\r\n};\r\n\r\nContactItem.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string\r\n}\r\n\r\nContactItem.defaultProps = {\r\n    name: \"Mickey Mouse\",\r\n    number: 123456789\r\n}\r\n\r\nexport default ContactItem","import { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n// const addContact = (name, number) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//       id: uuidv4(),\r\n//       name,\r\n//       number\r\n//     },\r\n// });\r\n\r\nconst addContact = createAction('phonebook/add', (name, number) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number\r\n  }\r\n}));\r\n\r\nconst deleteContact = createAction('phonebook/delete');\r\n\r\nconst changeFilter = createAction('phonebook/changeFilter');\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = value => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n\r\n// const addTodo = createAction('todos/add', text => ({\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     text,\r\n//     completed: false,\r\n//   },\r\n// }));\r\n\r\n// const deleteTodo = createAction('todos/delete');\r\n\r\n// const changeFilter = createAction('todos/changeFilter');","import React from 'react';\r\nimport ContactItem from '../ContactItem';\r\nimport PropTypes from 'prop-types';\r\nimport '../styles/base.scss'\r\nimport './ContactList.scss';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/actions'\r\n\r\nconst ContactsList = ({contacts, onClick}) => {\r\n    return (\r\n        <ul className='contact-list'>\r\n            {contacts.map(({id, name, number}) => {\r\n                return (<li key={id} className='contact-item'><ContactItem\r\n                    name={name}\r\n                    number={number} />\r\n                    <button type='button' onClick={()=>{onClick(id)}} className='button contact-item__button'>Delete</button>\r\n                </li>)\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n\r\nContactsList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onClick: PropTypes.func.isRequired\r\n};\r\n\r\nconst getFilteredContacts = (contacts, filter) => {\r\n    return contacts.filter(({name}) => {\r\n      return name.toLowerCase().includes(filter.toLowerCase())\r\n    })\r\n   };\r\n\r\nconst mapStateToProps = ({ contacts, filter }) => ({\r\n  contacts: getFilteredContacts(contacts, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onClick: id => dispatch(actions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactForm.scss'\r\nimport '../styles/base.scss';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/actions';\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n       onSubmit: PropTypes.func.isRequired\r\n    };\r\n\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\n      handleChange = (e) => {\r\n         this.setState({ [e.currentTarget.name]: e.currentTarget.value });\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state.name, this.state.number);\r\n        this.reset();\r\n  };\r\n\r\n    reset() {\r\n        this.setState({ name: '', number: '' });\r\n  };\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className='contacts-form'>\r\n                <label className='label'>\r\n                    Name<input\r\n                        type=\"text\"\r\n                        value={this.state.name}\r\n                        onChange={this.handleChange}\r\n                        name=\"name\"\r\n                        className='input' />\r\n                </label>\r\n                <label className='label'>\r\n                    Number<input\r\n                        type=\"tel\"\r\n                        value={this.state.number}\r\n                        onChange={this.handleChange}\r\n                        name=\"number\"\r\n                    className='input'/>\r\n                </label>\r\n                <button type=\"submit\" className='button contacts-form__button'>Add contact</button>\r\n            </form>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) => dispatch(actions.addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../styles/base.scss';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/actions';\r\n\r\nconst Filter = ({value, onChange}) => {\r\n    return (\r\n        <label className='label'>\r\n            Find contact by name\r\n         <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={onChange}\r\n            className='input'/>\r\n        </label>\r\n    );\r\n};\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(actions.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import './App.css';\nimport React from 'react';\nimport ContactsList from \"./components/ContactsList\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\"\n\nconst App = () => (\n  <>\n    <h1>Phonebook</h1>\n    <ContactForm />\n    <h2>Contacts</h2>\n    <Filter />\n    <ContactsList />\n  </>);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nconst contacts = [{ id: uuidv4(), name: 'Rosie Simpson', number: '459-12-56' },\r\n{ id: uuidv4(), name: 'Hermione Kline', number: '443-89-12' },\r\n{ id: uuidv4(), name: 'Eden Clements', number: '645-17-79' },\r\n{ id: uuidv4(), name: 'Annie Copeland', number: '227-91-26' }\r\n];\r\n\r\nexport default contacts","import { combineReducers, createStore } from 'redux';\r\nimport contacts from '../contacts';\r\nimport { createReducer, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport actions from './actions';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport types from './types'\r\n\r\n\r\n// const contactsList = (state = contacts, { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const middleware = [\r\n//   ...getDefaultMiddleware({\r\n//     serializableCheck: {\r\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//     },\r\n//   })\r\n// ];\r\n\r\n// const contactsPersistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst contactsList = createReducer(contacts, {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, {payload}) => payload\r\n})\r\n\r\nconst combineReducer = combineReducers({\r\n  contacts: contactsList,\r\n  filter\r\n});\r\n\r\n// const store = configureStore({\r\n//   reducer: {\r\n//     contacts: persistReducer(contactsPersistConfig, combineReducer),\r\n//   },\r\n//   middleware,\r\n//   devTools: process.env.NODE_ENV === 'development',\r\n// });\r\n\r\n// const persistor = persistStore(store);\r\n\r\nconst store = createStore(combineReducer);\r\n\r\nexport default { store};\r\n\r\n// const items = createReducer([], {\r\n//   [actions.addTodo]: (state, { payload }) => [...state, payload],\r\n//   [actions.deleteTodo]: (state, { payload }) =>\r\n//     state.filter(({ id }) => id !== payload),\r\n//   [actions.toggleCompleted]: (state, { payload }) =>\r\n//     state.map(todo =>\r\n//       todo.id === payload ? { ...todo, completed: !todo.completed } : todo,\r\n//     ),\r\n// });\r\n\r\n// const filter = createReducer('', {\r\n//   [actions.changeFilter]: (_, { payload }) => payload,\r\n// });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      \n        <App />\n      \n    </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}